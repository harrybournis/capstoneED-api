class Docs::V1::Projects < ApplicationController

	include Docs::Helpers::DocHelper
	DocHelper = Docs::Helpers::DocHelper

	resource_description do
	  short 'Projects belong to Assignments, and contain many Students'
	  name 'Projects'
	  api_base_url '/v1'
	  api_version 'v1'
	  meta attributes: { name: 'String', logo: 'Image', enrollment_key: 'String' }
	  description <<-EOS
			Projects contain many Students that participate in a Assignment. A Project has an enrollment key,
			which Student will use to become members of the Project, and by extension, participate in a
			Assignment. By default, a Project contains a generic name and no logo, but both can be updated
			by its Student members.
	  EOS
	end

	api :GET, '/projects', "Get Projects. Behaves differently for Student/Lecturer."
  meta :authentication? => true
  meta :includes => true
  param :assignment_id, Integer, 'Required ONLY if current user is Lecturer. Return all the Projects for the specific Assignment.'
  param :includes,		String,	DocHelper.param_includes_text('project_associations')
  error code: 400, desc: "Invalid 'includes' parameter."
  error code: 401, desc: 'Authentication failed'
	error code: 403, desc: 'Current User is not a Lecturer. This is due to the params containing a assignment_id while current user is a Student.'
	error code: 403, desc: 'Current User is not a Student. This is due to the params NOT containing a assignment_id while current user is a Lecturer.'
  error code: 403, desc: 'This User is not the owner of this resource'
  description <<-EOS
  	STUDENT: Returns all the current user's projects. Will return an error if assignment_id is present in the params.
  	LECTURER: Returns all the Projects for the provided assignment_id. Will return an error if assignment_id is missing from the params.
  EOS
  def index
  end

	api :GET, 'projects/:id', 'Show a Project'
  meta :authentication? => true
  meta :includes => true
  param :id, Integer, 'The id of the Project to be returned', required: true
  param :includes,		String,	DocHelper.param_includes_text('project_associations')
	error code: 400, desc: "Invalid 'includes' parameter."
  error code: 401, desc: 'Authentication failed'
	error code: 403, desc: 'This User is not the owner of this resource'
  example DocHelper.format_example(status = 200, nil, body = "{\n  \"project\": {\n    \"id\": 1,\n    \"name\": \"Project 1\",\n    \"logo\": null,\n    \"enrollment_key\": \"b3dcbaebc4b594f3dc145cd6e23b59ce\"\n  }\n}")
	example DocHelper.format_example(status = 403, nil, body = "{\n  \"errors\": {\n    \"base\": [\n      \"This Project can not be found in the current user's Projects\"\n    ]\n  }\n}")
	description <<-EOS
		Returns project if current user is associated with it.
	EOS
	def show
	end

	api :POST, '/projects', 'Create a new Project resource'
	meta :authentication? => true
	meta :lecturers_only => true
	param :assignment_id, Integer, "The assignment that the Project is created for", required: true
	param :name, String, "The name of the project. If not provided it is autogenerated."
	param :logo, String, "An image of the project logo."
	param :enrollment_key, String, "The key used by Students to become member of the Project. If not provided it is autogenerated."
	error code: 401, desc: 'Authentication failed'
	error code: 403, desc: 'Current User is not a Lecturer'
	error code: 403, desc: 'This User is not the owner of this resource'
	error code: 422, desc: 'Invalid Params'
	example DocHelper.format_example(status = 201, nil, body = "{\n  \"assignment\": {\n    \"id\": 1133,\n    \"start_date\": \"2016-08-29\",\n    \"end_date\": \"2016-10-16\",\n    \"description\": \"Excepturi quis non minus dolor qui officia. Aperiam ex dolorum libero atque perferendis molestiae quos. Et est quidem. Veniam deleniti provident sit.\",\n    \"unit\": {\n      \"id\": 2839,\n      \"name\": \"Streamlined object-oriented encoding\",\n      \"code\": \"B000FQ9CTY\",\n      \"semester\": \"Autumn\",\n      \"year\": 2016,\n      \"archived_at\": null\n    }\n  }\n}")
	description <<-EOS
		Create a new Project for belonging to a specific Assignment. A Project can only be created by the Lecturer
		that owns the Assignment. If no value is provided for the enrollment_key, it will be autogenerated.
	EOS
	def create
	end

	api :PATCH, '/projects/:id', 'Update a Project resource'
	meta :authentication? => true
	param :id, Integer, "The id of the Project", required: true
	param :name, String, "The name of the project. Can be set by Students."
	param :logo, String, "An image of the project logo. Can be set by Students."
	param :enrollment_key, String, "The key used by Students to become member of the Project."
	error code: 401, desc: 'Authentication failed'
	error code: 403, desc: 'This User is not the owner of this resource'
	error code: 422, desc: 'Invalid Params'
	example DocHelper.format_example(status = 200, nil, body = "{\n  \"project\": {\n    \"id\": 1,\n    \"name\": \"NewProjectName\",\n    \"logo\": \"http://www.images.com/images/4259\",\n    \"enrollment_key\": \"30444bd03c9dddca62691835b45a9d2a\"\n  }\n}")
	description <<-EOS
		Update a Project. Both the Lecturer that created the Assignment, and the Students that are members can
		edit the name and the logo of the Project. However, the enrollment key can only be edited by the
		Lecturer.
	EOS
	def update
	end

	api :DELETE, '/projects/:id', 'Delete Assignment'
	meta :authentication? => true
	meta :lecturers_only => true
	param :id, Integer, 'The id of the Project to be deleted', required: true
	error code: 401, desc: 'Authentication failed'
	error code: 403, desc: 'Current User is not a Lecturer'
	error code: 403, desc: 'This User is not the owner of this resource'
	error code: 422, desc: "Invalid params"
	description <<-EOS
		Delete Assignment resource. Only the Lecturer that created the associated Assignment can delete a
		Project.
	EOS
	def destroy
	end

	api :POST, '/projects/enrol', 'Students joins Project with enrolment_key'
	meta :authentication? => true
	meta :students_only => true
	param :enrollment_key, String, 'The enrollment key of the Project.', required: true
	error code: 401, desc: 'Authentication failed'
	error code: 403, desc: 'Current User is not a Student'
	error code: 403, desc: 'Student tried to join same Project twice'
	error code: 403, desc: 'Student tried to join two Projects in the same Assignment'
	error code: 422, desc: 'Wrong enrollment key'
	example DocHelper.format_example(status = 201, nil, body = "{\n  \"project\": {\n    \"id\": 2,\n    \"name\": \"Project 2\",\n    \"logo\": null,\n    \"enrollment_key\": \"e549c159189fbc1916843ca1becace65\"\n  }\n}")
	example DocHelper.format_example(status = 403, nil, body = "{\n  \"errors\": {\n    \"base\": [\n      \"Student can not exist in the same Project twice\"\n    ]\n  }\n}")
	description <<-EOS
		Add a Student in a Project. Needs the enrollment key of the Project. A Student can not belong to
		two Projects in the same assignment.
	EOS
	def enrol
	end

	api :DELETE, '/projects/:id/remove_student', 'Lecturer removes a Student from a Project'
	meta :authentication? => true
	meta :lecturers_only => true
	param :id, Integer, 'The id of the Project that the student belongs to', required: true
	param :student_id, Integer, 'The Id of the Student to be removed from the Project', required: true
	error code: 401, desc: 'Authentication failed'
	error code: 403, desc: 'Current User is not a Lecturer'
	error code: 403, desc: 'The current Lecturer is not associated with this Project.'
	error code: 422, desc: "The student_id does not belong to any Student of this Project."
	example DocHelper.format_example(status = 204, nil , body = "{\n}" )
	example DocHelper.format_example(status = 422, nil, body = "{\n  \"errors\": {\n    \"base\": [\n      \"Can't find Student with id 63 in this Project.\"\n    ]\n  }\n}")
	description <<-EOS
		A Lecturer can remove a Student from one of the Projects that belong to one of their Assignments.
	EOS
	def remove_student_from_project
	end
end
