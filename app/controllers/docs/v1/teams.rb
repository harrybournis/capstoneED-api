class Docs::V1::Teams < ApplicationController

	include Docs::Helpers::DocHelper
	DocHelper = Docs::Helpers::DocHelper

	resource_description do
	  short 'Teams belong to Projects, and contain many Students'
	  name 'Teams'
	  api_base_url '/v1'
	  api_version 'v1'
	  description <<-EOS
			Teams contain many Students that participate in a Project. A Team has an enrollment key,
			which Student will use to become members of the Team, and by extension, participate in a
			Project. By default, a Team contains a generic name and no logo, but both can be updated
			by its Student members.
	  EOS
	end

	api :GET, '/teams', "Get Teams. Behaves differently for Student/Lecturer."
  meta :authentication? => true
  param :project_id, Integer, 'Required ONLY if current user is Lecturer. Return all the Teams for the specific Project.'
  error code: 401, desc: 'Authentication failed'
  error code: 403, desc: 'This User is not the owner of this resource'
  description <<-EOS
  	STUDENT: Returns all the current user's teams.
  	LECTURER: Returns all the Teams for the provided project_id.
  EOS
  def index
  end

	api :GET, 'teams/:id', 'Show a Team'
  meta :authentication? => true
  param :id, Integer, 'The id of the Project to be returned', required: true
  error code: 401, desc: 'Authentication failed'
	error code: 403, desc: 'This User is not the owner of this resource'
  example DocHelper.format_example(status = 200, nil, body = "{\n  \"team\": {\n    \"id\": 1,\n    \"name\": \"Team 1\",\n    \"logo\": null,\n    \"enrollment_key\": \"b3dcbaebc4b594f3dc145cd6e23b59ce\"\n  }\n}")
	example DocHelper.format_example(status = 403, nil, body = "{\n  \"errors\": {\n    \"base\": [\n      \"This Team can not be found in the current user's Teams\"\n    ]\n  }\n}")
	description <<-EOS
		Returns team if current user is associated with it.
	EOS
	def show
	end

	api :POST, '/teams', 'Create a new Team resource'
	meta :authentication? => true
	param :project_id, Integer, "The project that the Team is created for", required: true
	param :name, String, "The name of the team. If not provided it is autogenerated."
	param :logo, String, "An image of the team logo."
	param :enrollment_key, String, "The key used by Students to become member of the Team. If not provided it is autogenerated."
	error code: 401, desc: 'Authentication failed'
	error code: 403, desc: 'Current User is not a Lecturer'
	error code: 403, desc: 'This User is not the owner of this resource'
	error code: 422, desc: 'Invalid Params'
	example DocHelper.format_example(status = 200, nil, body = "{\n  \"project\": {\n    \"id\": 1133,\n    \"start_date\": \"2016-08-29\",\n    \"end_date\": \"2016-10-16\",\n    \"description\": \"Excepturi quis non minus dolor qui officia. Aperiam ex dolorum libero atque perferendis molestiae quos. Et est quidem. Veniam deleniti provident sit.\",\n    \"unit\": {\n      \"id\": 2839,\n      \"name\": \"Streamlined object-oriented encoding\",\n      \"code\": \"B000FQ9CTY\",\n      \"semester\": \"Autumn\",\n      \"year\": 2016,\n      \"archived_at\": null\n    }\n  }\n}")
	description <<-EOS
		Create a new Team for belonging to a specific Project. A Team can only be created by the Lecturer
		that owns the Project.
	EOS
	def create
	end

	api :PATCH, '/teams/:id', 'Update a Team resource'
	meta :authentication? => true
	param :id, Integer, "The id of the Team", required: true
	param :name, String, "The name of the team. Can be set by Students."
	param :logo, String, "An image of the team logo. Can be set by Students."
	param :enrollment_key, String, "The key used by Students to become member of the Team."
	error code: 401, desc: 'Authentication failed'
	error code: 403, desc: 'This User is not the owner of this resource'
	error code: 422, desc: 'Invalid Params'
	example DocHelper.format_example(status = 200, nil, body = "{\n  \"team\": {\n    \"id\": 1,\n    \"name\": \"NewTeamName\",\n    \"logo\": \"http://www.images.com/images/4259\",\n    \"enrollment_key\": \"30444bd03c9dddca62691835b45a9d2a\"\n  }\n}")
	description <<-EOS
		Update a Team. Both the Lecturer that created the Project, and the Students that are members can
		edit the name and the logo of the Team. However, the enrollment key can only be edited by the
		Lecturer.
	EOS
	def update
	end

	api :DELETE, '/teams/:id', 'Delete Project'
	meta :authentication? => true
	param :id, Integer, 'The id of the Team to be deleted', required: true
	error code: 401, desc: 'Authentication failed'
	error code: 403, desc: 'Current User is not a Lecturer'
	error code: 403, desc: 'This User is not the owner of this resource'
	error code: 422, desc: "Invalid params"
	description <<-EOS
		Delete Project resource. Only the Lecturer that created the associated Project can delete a
		Team.
	EOS
	def destroy
	end
end
